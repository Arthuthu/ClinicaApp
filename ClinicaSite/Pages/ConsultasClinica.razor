@inject IConsultaService consultaService
@inject IUserDataService userDataService
@inject IPacienteService pacienteService

<div class="d-flex my-4 justify-content-center">
	<div>
		<button class="index-button" @onclick="GetAllConsultas" id="consultas-clinicas-button">
			Todas as consultas
		</button>
	</div>
	<div>
		<button class="index-button" @onclick="GetAllActiveConsultas" id="consultas-clinicas-button">
			Consultas ativas
		</button>
	</div>
</div>

<div class="text-center">
	<div class="d-flex justify-content-center">
		<div class="mx-2">
			<div class="h4 fw-bold">
				De
			</div>
			<div>
				<InputDate TValue="DateTime" id="firstDate"
					class="date-input" @bind-Value="firstDate" />
			</div>
		</div>
		<div class="mx-2">
			<div class="h4 fw-bold">
				Ate
			</div>
			<div>
				<InputDate TValue="DateTime" id="secondDate"
					 class="date-input" @bind-Value="secondDate" />
			</div>
		</div>
	</div>
	<div class="my-4">
		<button type="submit" class="index-button" id="consultas-clinicas-button"
				@onclick="async () => await GetConsultasByDateRange(firstDate, secondDate)">
			Pesquisar por data
		</button>
	</div>
</div>

@if (consultaSearchType == "Ativas")
{
	<div class="text-center h4 my-4 text-info fw-bold">
		Consultas ativas
	</div>
}

@if (consultaSearchType == "Todas")
{
	<div class="text-center h4 my-4 text-success fw-bold">
		Todas as consultas
	</div>
}

@if (consultaSearchType == "Data")
{
	<div class="text-center h4 my-4 text-danger fw-bold">
		Data
	</div>
}

<Virtualize Items="Consultas" Context="consulta" OverscanCount="20">
	<div class="historico-consultas-box">
		<div class="d-flex justify-content-center mb-2">
			<div class="fw-bold mx-2">
				@consulta.PacienteNome
			</div>
			<div class="fw-bold mx-2">
				@consulta.PacienteCel
			</div>
		</div>
		<div>
			@consulta.Data
		</div>
		<div>
			@consulta.Descricao
		</div>
	</div>
</Virtualize>

@code {
	private Guid LoggedInUserId { get; set; }
	private IList<ConsultaModel>? Consultas { get; set; }
	private IList<PacienteModel>? Pacientes { get; set; }
	private string consultaSearchType = "Ativas";
	private DateTime firstDate = DateTime.Today;
	private DateTime secondDate = DateTime.Today.AddMonths(1);

	protected override async Task OnInitializedAsync()
	{
		LoggedInUserId = await userDataService.GetLoggedInUserId();

		await GetAllActiveConsultas();

		if (Consultas is not null)
		{
			Pacientes = await pacienteService.GetAllPacientes(LoggedInUserId);
		}
	}

	private async Task GetAllConsultas()
	{
		var consultas = await consultaService.GetAllConsultas(LoggedInUserId);

		if (consultas is not null)
		{
			Consultas = consultas.OrderBy(x => x.Data).ToList();
		}

		consultaSearchType = "Todas";
	}

	private async Task GetAllActiveConsultas()
	{
		await GetAllConsultas();

		if (Consultas is not null)
		{
			Consultas = Consultas.Where(x => x.Data > DateTime.Today).OrderBy(x => x.Data).ToList();

			consultaSearchType = "Ativas";
		}
	}

	private async Task GetConsultasByDateRange(DateTime firstDate, DateTime secondDate)
	{
		await GetAllConsultas();

		if (Consultas is not null)
		{
			Consultas = Consultas.Where(x => x.Data > firstDate && x.Data < secondDate)
			.OrderBy(x => x.Data).ToList();

			consultaSearchType = "Data";
		}
	}
}
