@page "/agendamento/{pacienteid}"
@inject IUserDataService userService
@inject IPacienteService pacienteService
@inject IConsultaService consultaService
@inject NavigationManager navManager

<div class="text-center fw-bold h4 my-4">
    Agende uma consulta para @Paciente!.Nome @Paciente.Sobrenome
</div>

<EditForm Model="Consulta" OnValidSubmit="CreateConsulta">
    <div class="text-center">
        <div class="fw-bold h4">
            Data
        </div>
        <div class="my-4">
            <InputDate TValue="DateTime" id="date" ValueExpression="@(() => Consulta.Data)"
                       @bind-value="Consulta.Data" placeholder="Escolha uma data" class="date-input"/>
        </div>

        <div>
            <InputTextArea id="descricao" @bind-Value="Consulta.Descricao"
                           placeholder="Digite uma descrição (Não obrigatório)" class="textarea-input" />
        </div>

        <div class="text-center my-4">
            <button type="submit" class="index-button">
                Agendar consulta
            </button>
        </div>
    </div>
</EditForm>

<div class="text-center fw-bold h4 my-4">
    @responseMessage
</div>

@code {
    [Parameter]
    public string? PacienteId { get; set; }
    private Guid LoggedInUserId { get; set; }
    private PacienteModel? Paciente { get; set; }
    private ConsultaModel Consulta = new();
    private string? responseMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await PageVerification();
    }

    protected override async Task OnParametersSetAsync()
    {
        await PageVerification();
    }

    private async Task PageVerification()
    {
        if (PacienteId is null)
        {
            navManager.NavigateTo("/index");
        }

        LoggedInUserId = await userService.GetLoggedInUserId();

        if (LoggedInUserId == Guid.Empty)
        {
            navManager.NavigateTo("/login");
        }

        Paciente = await pacienteService.GetPacienteById(new Guid(PacienteId!));

        if (Paciente is null)
        {
            navManager.NavigateTo("/index");
        }
    }

    private async Task CreateConsulta()
    {
        Consulta.ClinicaId = LoggedInUserId;
        Consulta.PacienteId = Paciente!.Id;

        responseMessage = await consultaService.CreateConsulta(Consulta);
    }
}