@page "/agendamento/{pacienteid}"
@inject IUserDataService userService
@inject IPacienteService pacienteService
@inject IConsultaService consultaService
@inject NavigationManager navManager

@if (isInitialized)
{
    <div class="text-center fw-bold h4 my-4">
        Agende uma consulta para @Paciente!.Nome @Paciente.Sobrenome
    </div>

    @if (PacienteHasActiveConsulta is true)
    {
        <div class="text-center text-danger h4 fw-bold my-4">
            O paciente ja possui uma consulta agendada, caso crie outra, a sua consulta antiga sera substituida
        </div>
    }

    <EditForm Model="Consulta" OnValidSubmit="CreateConsulta">
        <div class="text-center">
            <div class="fw-bold h4">
                Data
            </div>
            <div class="my-4">
                <div>
                    <InputDate TValue="DateTime" id="date" ValueExpression="@(() => Consulta.Data)"
                           @bind-value="Consulta.Data" placeholder="Escolha uma data" class="date-input" />
                </div>

            </div>

            <div class="d-flex justify-content-center mb-md-5">
                <div class="mx-4">
                    <div class="fw-bold h5">
                        Hora
                    </div>
                    <div>
                        <InputText id="hora" placeholder="Digite a hora (0 a 23)" @bind-Value="Hora"
                                   class="fs-5"></InputText>
                    </div>
                </div>
                <div class="mx-4">
                    <div class="fw-bold h5">
                        Minutos
                    </div>
                    <div>
                        <InputText id="minutos" placeholder="Digite os minutos (0 a 59)" @bind-Value="Minutos"
                                   class="fs-5"></InputText>
                    </div>
                </div>
            </div>

            <div>
                <InputTextArea id="descricao" @bind-Value="Consulta.Descricao"
                               placeholder="Digite uma descrição (Não obrigatório)" class="textarea-input" />
            </div>

            <div class="d-flex justify-content-around my-4">
                <div class="my-4">
                    <a class="index-button" href="/pacientedetails/@Paciente.Id">
                        Voltar
                    </a>
                </div>
                <div>
                    <button type="submit" class="index-button">
                        Agendar consulta
                    </button>
                </div>
            </div>
        </div>
    </EditForm>

    <div class="text-center fw-bold h4 my-4">
        @responseMessage
    </div>
}

@code {
    [Parameter]
    public string? PacienteId { get; set; }
    private Guid LoggedInUserId { get; set; }
    private PacienteModel? Paciente { get; set; }
    private ConsultaModel Consulta = new();
    private List<ConsultaModel>? ConsultasRegistradas { get; set; }
    private bool PacienteHasActiveConsulta = false;
    private string? Hora;
    private string? Minutos;
    private string? responseMessage = "";
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        await PageVerification();
    }

    protected override async Task OnParametersSetAsync()
    {
        await PageVerification();
    }

    private async Task PageVerification()
    {
        if (PacienteId is null)
        {
            navManager.NavigateTo("/");
        }

        LoggedInUserId = await userService.GetLoggedInUserId();

        if (LoggedInUserId == Guid.Empty)
        {
            navManager.NavigateTo("/login");
        }

        Paciente = await pacienteService.GetPacienteById(new Guid(PacienteId!));

        if (Paciente is null)
        {
            navManager.NavigateTo("/");
        }

        if (Paciente!.ClinicaId != LoggedInUserId)
        {
            navManager.NavigateTo("/");
        }

        ConsultasRegistradas = await consultaService.GetConsultasByPacienteId(LoggedInUserId, Paciente!.Id);

        VerifiyForActiveConsulta();

        isInitialized = true;
    }

    private async Task CreateConsulta()
    {
        bool isHourValid = IsHourValid();

        if (isHourValid is true)
        {
            InsertConsultaValues();

            if (PacienteHasActiveConsulta is true)
            {
                await RemoveActiveConsulta();
            }

            responseMessage = await consultaService.CreateConsulta(Consulta);

            if (responseMessage == "Consulta agendada com sucesso")
            {
                navManager.NavigateTo($"/pacientedetails/{Paciente!.Id}");
            }
        }
    }

    private bool IsHourValid()
    {
        int hora = int.Parse(Hora!);
        int minutos = int.Parse(Minutos!);

        if (hora < 0 || hora > 23)
        {
            responseMessage = "Hora não esta com um valor válido";

            return false;
        }
        else if (minutos < 0 || minutos > 59)
        {
            responseMessage = "Minutos não está com um valor válido";

            return false;
        }

        return true;
    }

    private void InsertConsultaValues()
    {
        int hora = int.Parse(Hora!);
        int minutos = int.Parse(Minutos!);

        Consulta.Data = Consulta.Data.AddHours(hora);
        Consulta.Data = Consulta.Data.AddMinutes(minutos);
        Consulta.ClinicaId = LoggedInUserId;
        Consulta.PacienteId = Paciente!.Id;
    }

    private bool VerifiyForActiveConsulta()
    {
        if (ConsultasRegistradas is not null)
        {
            foreach (var consulta in ConsultasRegistradas)
            {
                if (consulta.Data > DateTime.UtcNow.AddHours(-3))
                {
                    PacienteHasActiveConsulta = true;

                    return true;
                }
            }
            PacienteHasActiveConsulta = false;

            return false;
        }

        return false;
    }

    private async Task RemoveActiveConsulta()
    {
        foreach (var consulta in ConsultasRegistradas!)
        {
            if (consulta.Data > DateTime.UtcNow.AddHours(-3))
            {
                await consultaService.DeleteConsulta(consulta.Id);
            }
        }
    }
}